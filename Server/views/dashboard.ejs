<head>
  <title>Ride</title> 
	<script src="http://code.jquery.com/jquery-2.0.0.min.js"></script>
	<script src="http://cdn.leafletjs.com/leaflet-0.7.3/leaflet.js"></script>
	<script src="dp.js"></script>
	<link href="dp.css" rel="stylesheet"/>
	<script src='https://api.tiles.mapbox.com/mapbox.js/v2.1.5/mapbox.js'></script>
  <link href='https://api.tiles.mapbox.com/mapbox.js/v2.1.5/mapbox.css' rel='stylesheet' />
  
  <link rel="stylesheet" href="http://code.ionicframework.com/ionicons/1.5.2/css/ionicons.min.css">	
	<link href="leaflet.awesome-markers.css" rel="stylesheet"/>	
	<script src="ionicons.min.css"></script>
	<script src="leaflet.awesome-markers.min.js"></script>
	<link href='http://fonts.googleapis.com/css?family=Milonga' rel='stylesheet' type='text/css'>
	<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />	
	<style type="text/css">
		body {
    		padding: 0;
		    margin: 0;
		}
		html, body {
		    font: normal 14px 'courier new';
		}
		#map {
		  position: absolute;
		  padding-bottom: 40px;
		  min-height: 100%;
	    min-width: 100%;
	    margin: 0px;
	    z-index: 0;
		}
		.leaflet-container .leaflet-control-zoom {
				margin-top: 20px;
		    margin-left: 20px;
		}
		#toolbar {
		  width: 230px;
		  height: 230px;
	    margin-top: 0px;
	    padding: 20px;
	    float: right;
	    right: 510;
	    background-color: white;
	    opacity: 0.9;
	    z-index: 1;
	    position: absolute;
		}
		#content {
		  width: 80%;
		  min-height: 100%;
	    max-width: 500px;
	    margin-top: 0px;
	    margin-right: 0px;
	    right: 0px;
	    padding: 20px;
	    float: right;
	    background-color: white;
	    opacity: 0.9;
	    z-index: 1;
	    position: absolute;
		}
		#screenshot {
	    margin-right: 60px;
  	  float: left;
		}
    .axis {  
      font: 10px sans-serif;
    }
    .legend tr{    border-bottom:1px solid grey; }
    .legend tr:first-child{    border-top:1px solid grey; }

    .axis path,
    .axis line {
      fill: none;
      stroke: #000;
      shape-rendering: crispEdges;
    }

    .x.axis path {  display: none; }
	</style>	
	
</head>

<body>
  <div id="map">
  <script>
  	var map = L.map('map', {
  	 center: [45.52, -122.6519],
  	 zoom: 14,
  	 scrollWheelZoom: false,
  	 reuseTiles: true
  	})
  </script>
  <script src="map.js"></script>	
  <script>
  	var incidentLayerGroup = L.layerGroup().addTo(map);
  function drawTripsAndIncidentsOnMap(geojson) {
    drawTripsOnMap(geojson);
    drawIncidentsOnMap(geojson);
  }
  function drawIncidentsOnMap(geojson){
	  var trips = geojson.features
		map.removeLayer(incidentLayerGroup);	
		var incidentArray = [];
		
		for (var i = 0; i < trips.length; i++){
			trip = trips[i];	  			  			
			if (trip.properties.activity_type == 2) {
			  if (trip.properties.incidents) {
  			  for (var v = 0; v < trip.properties.incidents.length; v++) {
  			    var incident = trip.properties.incidents[v];
  			    var marker = L.marker(incident.pos, {icon: incidentTypeIcon(incident.type)});  			    
  			    marker.bindPopup("<b>" + incidentTypeString(incident.type) + "</b><br><i>" + incident.creationDate + "</i><br/>" + (incident.body ? incident.body : "") + "<br/><hr/><textarea rows='4' cols='40' placeholder='Enter a commentâ€¦'></textarea><a href='/comment/new'>Add</a>").openPopup();
  			    incidentArray.push(marker);
  			  }
		    }
			}
		}			
		
		incidentLayerGroup = L.layerGroup(incidentArray).addTo(map);
	}
	function incidentTypeIcon(type) {
    switch(type) {
        case 0:
            // Other
            return L.AwesomeMarkers.icon({
                icon: 'flag',
                prefix: 'ion',
                markerColor: 'lightgray'
              });
        case 1:
            // Road Hazard        
            return L.AwesomeMarkers.icon({
                icon: 'alert',
                prefix: 'ion',
                markerColor: 'red'
              });
        case 2:
            // Unsafe Intersection        
            return L.AwesomeMarkers.icon({
                icon: 'network',
                prefix: 'ion',
                markerColor: 'red'
              });
        case 3:
            // Bike Lane Ends        
            return L.AwesomeMarkers.icon({
                icon: 'arrow-graph-down-right',
                prefix: 'ion',
                markerColor: 'red'
              });
        case 4:
            // Unsafe Speeds        
            return L.AwesomeMarkers.icon({
                icon: 'speedometer',
                prefix: 'ion',
                markerColor: 'red'
              });
        case 5:
            // Aggressive Motirst        
            return L.AwesomeMarkers.icon({
                icon: 'model-s',
                prefix: 'ion',
                markerColor: 'orange'
              });
        case 6:
            // Insufficient Parking
            return L.AwesomeMarkers.icon({
                icon: 'code',
                prefix: 'ion',
                markerColor: 'darkpurple'
              });
        case 7:
            // Suspected Stolen Bikes
            return L.AwesomeMarkers.icon({
                icon: 'eye',
                prefix: 'ion',
                markerColor: 'black'
              });
        }
  }
  
  function incidentTypeString(type) {
      switch(type) {
          case 0:
              return "Other"
          case 1:
              return "Road Hazard"
          case 2:
              return "Unsafe Intersection"
          case 3:
              return "Bike Lane Ends"
          case 4:
              return "Unsafe Speeds"
          case 5:
              return "Aggressive Motorist"
          case 6:
              return "Insufficient Parking"
          case 7:
              return "Suspected Stolen Bikes"
          }
    }
    
  	function getTrips(){
  		var url = "../trips";
  		$.get(url, drawTripsAndIncidentsOnMap, "json");
  	}
  	function getTripsOnDate(dateString){			
      var url = "../trips/date/" + dateString;
  		$.get(url, drawTripsAndIncidentsOnMap, "json");
  	}
  	map.whenReady(getTrips)
  </script>
	<div id="content">
  <table>
    <tr>
      <td><strong>Total trips</strong></td><td><%=bikeTripsCount%> trips</td>
    </tr>
    <tr>
      <td><strong>Rated trips</strong></td><td> <%= ratedTripsCount%> trips</td>
    </tr>        
    <tr>
      <td><strong>Average Rating</strong></td><td> <%=(totalRatingMagnitude/ratedTripsCount).toFixed(2)%></td>      
    </tr>
  </table>
  <body>
  <div id='dashboard'>
  </div>
</div>
<div id="toolbar">  
  <div id="static-container"></div>
  
  <script>
  var dp = new DatePicker().show('#static-container')
    , floater = new DatePicker()
  dp.on('change', function(date) {
    var dateThing =date.getFullYear() + "-" + ('0' + (date.getMonth() + 1)).slice(-2) + "-" + ('0' + date.getDate()).slice(-2)
    getTripsOnDate(dateThing)
  });
  </script>
</div>
</div>
</body>
<script src="http://d3js.org/d3.v3.min.js"></script>
<script>
function dashboard(id, fData){
    var barColor = 'steelblue';
    var bar2Color = 'green';
    function segColor(c){ return {low:"#807dba", mid:"#e08214",high:"#41ab5d"}[c]; }
        
    // function to handle histogram.
    function histoGram(fD){
        var hG={},    hGDim = {t: 60, r: 0, b: 30, l: 0};
        hGDim.w = 480 - hGDim.l - hGDim.r, 
        hGDim.h = 300 - hGDim.t - hGDim.b;
            
        //create svg for histogram.
        var hGsvg = d3.select(id).append("svg")
            .attr("width", hGDim.w + hGDim.l + hGDim.r)
            .attr("height", hGDim.h + hGDim.t + hGDim.b).append("g")
            .attr("transform", "translate(" + hGDim.l + "," + hGDim.t + ")");

        // create function for x-axis mapping.
        var x = d3.scale.ordinal().rangeRoundBands([0, hGDim.w], 0.1)
                .domain(fD.map(function(d) { return d[0]; }));

        // Add x-axis to the histogram svg.
        hGsvg.append("g").attr("class", "x axis")
            .attr("transform", "translate(0," + hGDim.h + ")")
            .call(d3.svg.axis().scale(x).orient("bottom"));

        // Create function for y-axis map.
        var y = d3.scale.linear().range([hGDim.h, 0])
                .domain([0, d3.max(fD, function(d) { return d[1]; })]);
                // Create function for y-axis map.
                
        var bars = hGsvg.selectAll(".bar").data(fD).enter()
                .append("g").attr("class", "bar");    
                
        //Weekends bar
        bars.append("rect")
            .attr("x", function(d) { return x(d[0]); })
            .attr("y", 0)
            .attr("width", x.rangeBand())
            .attr("height", hGDim.h)
            .attr('fill',function(d) { return (d[2] == 0 || d[2] == 6) ? "grey" : "white" });                       
        
        //Trips bar
        bars.append("rect")
            .attr("x", function(d) { return x(d[0]); })
            .attr("y", function(d) { return y(d[1]); })
            .attr("width", x.rangeBand())
            .attr("height", function(d) { return hGDim.h - y(d[1]); })
            .attr('fill',barColor);            
            
        //Trips bar label
        bars.append("text").text(function(d){ return d3.format(",")(d[1])})
            .attr("x", function(d) { return x(d[0])+x.rangeBand()/2; })
            .attr("y", function(d) { return y(d[1])-5; })
            .attr("text-anchor", "middle");
        return hG;
    }
    
    var hG = histoGram(fData); // create the histogram.
}
</script>

<script>
var weekData =  JSON.parse('<%-JSON.stringify(weekData)%>');
var graphData = Object.keys(weekData).map(function (key) { return weekData[key];}).sort(function(a,b) { return a[0] > b[0] ? 1 : a[0] < b[0] ? -1 : 0});
dashboard('#dashboard',graphData);
</script>